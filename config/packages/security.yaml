security:

    encoders:
        App\Entity\User:
            algorithm: bcrypt

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users_in_memory: { memory: null }
        # les providers permettent de préciser à symfony ou sont stockées les données à contrôler,c'est a dire les données de l'utilisateur stockées en BDD,et quelle propriété il va devoir contrôler
        in_database:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            lazy: true

            # firewalls,quel partie nous allons protéger et par quel moyen
            # on précise à symfony que nous allons protéger le contenu principal du site par rapport au providor'in_database',c'est a dire avec les données des utilisateurs stockés en BDD
            provider: in_database

            form_login:
                login_path: security_login
                check_path: security_login

            logout:
                path: security_logout 
                target: blog
                # a la deconnexion, nous sommes redirigé vers la route'blog' c'est a dire vers l'affichage des articles



            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
